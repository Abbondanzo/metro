"use strict";(self.webpackChunkmetro_website=self.webpackChunkmetro_website||[]).push([[371],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(f,i(i({ref:n},c),{},{components:t})):r.createElement(f,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1041:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"api",title:"API"},p=void 0,s={unversionedId:"api",id:"api",title:"API",description:"Quick Start",source:"@site/../docs/API.md",sourceDirName:".",slug:"/api",permalink:"/metro/docs/api",editUrl:"https://github.com/facebook/metro/edit/main/docs/../docs/API.md",tags:[],version:"current",lastUpdatedAt:1648056253,formattedLastUpdatedAt:"3/23/2022",frontMatter:{id:"api",title:"API"},sidebar:"docs",previous:{title:"Caching",permalink:"/metro/docs/caching"},next:{title:"Configuring Metro",permalink:"/metro/docs/configuration"}},c={},d=[{value:"Quick Start",id:"quick-start",level:2},{value:"Reference",id:"reference",level:2},{value:"<code>loadConfig(&lt;options&gt;)</code>",id:"loadconfigoptions",level:3},{value:"<code>async runMetro(config)</code>",id:"async-runmetroconfig",level:3},{value:"<code>async runBuild(config, &lt;options&gt;)</code>",id:"async-runbuildconfig-options",level:3},{value:"<code>async runServer(config, &lt;options&gt;)</code>",id:"async-runserverconfig-options",level:3},{value:"<code>createConnectMiddleware(config, &lt;options&gt;)</code>",id:"createconnectmiddlewareconfig-options",level:3}],u={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"quick-start"},"Quick Start"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Compile a file"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const config = await Metro.loadConfig();\n\nawait Metro.runBuild(config, {\n  entry: 'index.js',\n  out: 'bundle.js',\n});\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Run a server and watch the filesystem for changes"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const config = await Metro.loadConfig();\n\nawait Metro.runServer(config, {\n  port: 8080,\n});\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a Connect middleware and plug it into a server"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const Metro = require('metro');\nconst express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\n\nMetro.loadConfig().then(async config => {\n  const connectMiddleware = await Metro.createConnectMiddleware(config);\n  const {server: {port}} = config;\n\n  app.use(connectMiddleware.middleware);\n  server.listen(port);\n  connectMiddleware.attachHmrServer(server);\n});\n")))),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("p",null,"All functions exposed below accept an additional ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," option. This object should be the ",(0,a.kt)("a",{parentName:"p",href:"/metro/docs/cli"},"Metro configuration")," exposed by your ",(0,a.kt)("inlineCode",{parentName:"p"},"metro.config.js")," file - you can obtain it using ",(0,a.kt)("inlineCode",{parentName:"p"},"Metro.loadConfig"),"."),(0,a.kt)("h3",{id:"loadconfigoptions"},(0,a.kt)("inlineCode",{parentName:"h3"},"loadConfig(<options>)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Basic options:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"config"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"cwd")),(0,a.kt)("p",null,"Load the Metro configuration, either from ",(0,a.kt)("inlineCode",{parentName:"p"},"config")," in options if specified, or by traversing the directory hierarchy from ",(0,a.kt)("inlineCode",{parentName:"p"},"cwd")," to the root until it finds a file (by default ",(0,a.kt)("inlineCode",{parentName:"p"},"metro.config.js"),"). The returned configuration will have been normalized and merged with Metro's default values."),(0,a.kt)("h3",{id:"async-runmetroconfig"},(0,a.kt)("inlineCode",{parentName:"h3"},"async runMetro(config)")),(0,a.kt)("p",null,"Creates a Metro server based on the config and returns it. You can use this as a middleware in your existing server."),(0,a.kt)("h3",{id:"async-runbuildconfig-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"async runBuild(config, <options>)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Required options:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"entry"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"out")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Basic options:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"dev"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"minify"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"platform"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceMap"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceMapUrl")),(0,a.kt)("p",null,"Bundles ",(0,a.kt)("inlineCode",{parentName:"p"},"entry")," for the given ",(0,a.kt)("inlineCode",{parentName:"p"},"platform"),", and saves it to location ",(0,a.kt)("inlineCode",{parentName:"p"},"out"),". If ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceMap")," is set, also generates a source map. The source map will be inlined, unless ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceMapUrl")," is also defined. In the latter case, a new file will be generated with the basename of the ",(0,a.kt)("inlineCode",{parentName:"p"},"sourceMapUrl")," parameter."),(0,a.kt)("h3",{id:"async-runserverconfig-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"async runServer(config, <options>)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Basic options:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"host"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secureServerOptions"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secure (DEPRECATED)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secureKey (DEPRECATED)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secureCert (DEPRECATED)")),(0,a.kt)("p",null,"Starts a full Metro HTTP server. It will listen on the specified ",(0,a.kt)("inlineCode",{parentName:"p"},"host:port"),", and can then be queried to retrieve bundles for various entry points. If the ",(0,a.kt)("inlineCode",{parentName:"p"},"secureServerOptions")," family of options are present, the server will be exposed over HTTPS."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"secure"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secureKey"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"secureCert")," are now deprecated and will be removed in a later release. The presence of ",(0,a.kt)("inlineCode",{parentName:"p"},"secureServerOptions"),", along with its options will make Metro run over https."),(0,a.kt)("h3",{id:"createconnectmiddlewareconfig-options"},(0,a.kt)("inlineCode",{parentName:"h3"},"createConnectMiddleware(config, <options>)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Basic options:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"port"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"onBundleBuilt")),(0,a.kt)("p",null,"Instead of creating the full server, creates a Connect middleware that answers to bundle requests. This middleware can then be plugged into your own servers. The ",(0,a.kt)("inlineCode",{parentName:"p"},"port")," parameter is optional and only used for logging purposes. The ",(0,a.kt)("inlineCode",{parentName:"p"},"onBundleBuilt")," function is optional, is passed the bundle name, and is called when the server has finishing creating the bundle."))}m.isMDXComponent=!0}}]);