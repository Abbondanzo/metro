(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{148:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return l}));var n=a(1),c=a(10),o=(a(0),a(165)),i={id:"caching",title:"Caching"},s={id:"caching",title:"Caching",description:"Metro has a multi-layered cache: you can set up multiple caches to be used by Metro instead of one. This has several advantages, on this page we will explain how the caches work.",source:"@site/../docs/Caching.md",permalink:"/metro/docs/caching",editUrl:"https://github.com/facebook/metro/edit/master/website/../docs/Caching.md",sidebar:"docs",previous:{title:"Bundling",permalink:"/metro/docs/bundling"},next:{title:"API",permalink:"/metro/docs/api"}},r=[{value:"Why Cache?",id:"why-cache",children:[]},{value:"Cache Fetching &amp; Saving",id:"cache-fetching--saving",children:[]}],h={rightToc:r};function l(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},h,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Metro has a multi-layered cache: you can set up multiple caches to be used by Metro instead of one. This has several advantages, on this page we will explain how the caches work."),Object(o.b)("h2",{id:"why-cache"},"Why Cache?"),Object(o.b)("p",null,"Caches give big performance benefits, they can increase the speed of a bundler with more than tenfold. However, many systems use a non-persistent cache. With Metro we have a more sophisticated way of caching with a layer system. For example, we can store the cache on a server. Because of this all bundlers connected to the same server can use the shared cache. As a result the initial build time for CI servers and local development become significantly lower."),Object(o.b)("p",null,"We want to store caches in multiple places as to always have a cache to fallback to. That's why there is a multi-layered cache system."),Object(o.b)("h2",{id:"cache-fetching--saving"},"Cache Fetching & Saving"),Object(o.b)("p",null,"There is an ordering mechanism to determine which cache to use. For retrieving a cache we go through the caches from ",Object(o.b)("em",{parentName:"p"},"top to bottom")," until we find a result, for saving a cache we do the same until we find a store that has the cache."),Object(o.b)("p",null,"Let's say you have two cache stores: one on a server and one on your local file system. You would specify that in this way:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const config = {\n  cacheStores: [\n    new FileStore({/*opts*/}),\n    new NetworkStore({/*opts*/})\n  ]\n}\n")),Object(o.b)("p",null,"Metro will first look into the ",Object(o.b)("inlineCode",{parentName:"p"},"FileStore")," when we retrieve a cache. If it can't find the cache there it will check ",Object(o.b)("inlineCode",{parentName:"p"},"NetworkStore"),", and so on. Finally if there's no cache there it will generate a new cache itself. As soon as the cache has been generated, Metro will go again from top to bottom to store the cache in ",Object(o.b)("em",{parentName:"p"},"all")," stores. This also happens if a cache is found. For example, if Metro finds a cache in the ",Object(o.b)("inlineCode",{parentName:"p"},"NetworkStore")," it will store it in ",Object(o.b)("inlineCode",{parentName:"p"},"FileStore")," as well."))}l.isMDXComponent=!0}}]);